
・node.jsについて
「サーバサイドで動作できるJavaScript環境」

javascriptは基本、サイト上で文字をループさせたり
時計を表示させたりするが、これはCL側
（ブラウザ上で表示：処理する役割）

サーバーサイドの動きは「ブラウザに結果を返す為、サーバー内の処理を行う」
これはwebアプリの動きをイメージすると何となくわかる。

node.jsが使われてるものとして
・リアルタイムアプリ（ライン、ライブチャット）
・位置情報アプリ
・EC
・アプリケーションストリーミング（ネトゲ？）
等がある。
CL側で持ってない情報のやり取りをする際
（チャット、ECなどユーザーのやり取り：「～を買いたい」→「～ですね？」）
を繋げて成立するアプリ、この動きがサーバーサイドと思う。

端的に言うとnode.jsはこの動きをjavascriptでも作れるようにしよう。
というもの。

特徴は
・シングルスレッド、ノンブロッキングI/O、細かい処理に強い

・シングルスレッド：処理を順番に１つずつ行う。
・ノンブロッキングI/O：待ち時間の間に他の事を行うような仕組み
（例：洗濯機を回している間に、部屋の掃除を済ます）
・細かい処理に強い：ラインのような表示させるのは「文字だけ」
のようなものは得意

大きいメリット：フロントもサーバーもjavascriptで書ける。

npm:node.jsのパッケージ管理ツール
「パッケージ」：JQuery、webpackのようなライブラリ、フレームワークのこと
node.jsで「～ってライブラリ使いたい」時はnpmを用いる。

・gulp:タスクを自動化するツールのひとつ（タスクランナー）
node.jsをベースにしている。
（cssにベンダープレフィックスを付ける。画像やcss、JavaScriptの圧縮
　sassをコンパイル等）

・webpack：モジュールバンドラ（複数のファイルを一つにまとめて出力するツール）
用語：バンドル（複数のファイルをまとめること）
　　　アセット（動画とか、画像とかデータ・素材のまとめ）
主にjsをバンドル

なぜ使われるのか
開発効率アップ：ファイルを機能ごとにわけたりできるので整理できる
システムの性能アップ：ブラウザからのリクエスト数を減らし、ファイル転送の効率が向上

追加機能：babel等
「新しい仕様で書いたjsファイル」→「旧仕様のもの」に変換
旧仕様のものでないと対応してないブラウザに対応させるため
（トランスコンパイラという）

https://oshin.tokyo/entry/2020-stylelint
stylelintを使ってCSSプロパティのソートと整形を自動化する








